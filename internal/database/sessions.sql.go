// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: sessions.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const getNewestSession = `-- name: GetNewestSession :one
SELECT id, created_at, updated_at, started_at, ended_at, pause_seconds, user_id, paused_at, corresponding_date, started_at_local_date, activity_id FROM sessions
WHERE user_id = $1
ORDER BY started_at DESC
LIMIT 1
`

func (q *Queries) GetNewestSession(ctx context.Context, userID uuid.UUID) (Session, error) {
	row := q.db.QueryRowContext(ctx, getNewestSession, userID)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.StartedAt,
		&i.EndedAt,
		&i.PauseSeconds,
		&i.UserID,
		&i.PausedAt,
		&i.CorrespondingDate,
		&i.StartedAtLocalDate,
		&i.ActivityID,
	)
	return i, err
}

const pauseSession = `-- name: PauseSession :exec
UPDATE sessions
SET updated_at = NOW(), paused_at = $1
WHERE id = $2
`

type PauseSessionParams struct {
	PausedAt sql.NullTime
	ID       uuid.UUID
}

func (q *Queries) PauseSession(ctx context.Context, arg PauseSessionParams) error {
	_, err := q.db.ExecContext(ctx, pauseSession, arg.PausedAt, arg.ID)
	return err
}

const resumeSession = `-- name: ResumeSession :exec
UPDATE sessions
SET updated_at = NOW(), paused_at = NULL, pause_seconds = $1
WHERE id = $2
`

type ResumeSessionParams struct {
	PauseSeconds int32
	ID           uuid.UUID
}

func (q *Queries) ResumeSession(ctx context.Context, arg ResumeSessionParams) error {
	_, err := q.db.ExecContext(ctx, resumeSession, arg.PauseSeconds, arg.ID)
	return err
}

const startSession = `-- name: StartSession :exec
INSERT INTO sessions(
    id,
    created_at,
    updated_at,
    started_at,
    user_id,
    activity_id,
    started_at_local_date
)
VALUES (
    $1, NOW(), NOW(), NOW(), $2, $3, $4
)
`

type StartSessionParams struct {
	ID                 uuid.UUID
	UserID             uuid.UUID
	ActivityID         uuid.NullUUID
	StartedAtLocalDate time.Time
}

func (q *Queries) StartSession(ctx context.Context, arg StartSessionParams) error {
	_, err := q.db.ExecContext(ctx, startSession,
		arg.ID,
		arg.UserID,
		arg.ActivityID,
		arg.StartedAtLocalDate,
	)
	return err
}

const stopSession = `-- name: StopSession :exec
UPDATE sessions
SET updated_at = NOW(), ended_at = NOW(), pause_seconds = $1, paused_at = NULL, corresponding_date = $2
WHERE id = $3
`

type StopSessionParams struct {
	PauseSeconds      int32
	CorrespondingDate sql.NullTime
	ID                uuid.UUID
}

func (q *Queries) StopSession(ctx context.Context, arg StopSessionParams) error {
	_, err := q.db.ExecContext(ctx, stopSession, arg.PauseSeconds, arg.CorrespondingDate, arg.ID)
	return err
}
