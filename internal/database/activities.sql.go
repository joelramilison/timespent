// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: activities.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createActivity = `-- name: CreateActivity :one
INSERT INTO activities(
    id, created_at, updated_at, name, user_id, color_code
)
VALUES (
    $1, NOW(), NOW(), $2, $3, '000000'
)
RETURNING id, created_at, updated_at, name, user_id, color_code
`

type CreateActivityParams struct {
	ID     uuid.UUID
	Name   string
	UserID uuid.UUID
}

func (q *Queries) CreateActivity(ctx context.Context, arg CreateActivityParams) (Activity, error) {
	row := q.db.QueryRowContext(ctx, createActivity, arg.ID, arg.Name, arg.UserID)
	var i Activity
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.UserID,
		&i.ColorCode,
	)
	return i, err
}

const deleteActivity = `-- name: DeleteActivity :exec
DELETE FROM activities
WHERE id = $1
`

func (q *Queries) DeleteActivity(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteActivity, id)
	return err
}

const getActivity = `-- name: GetActivity :one
SELECT id, created_at, updated_at, name, user_id, color_code FROM activities
WHERE id = $1
`

func (q *Queries) GetActivity(ctx context.Context, id uuid.UUID) (Activity, error) {
	row := q.db.QueryRowContext(ctx, getActivity, id)
	var i Activity
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.UserID,
		&i.ColorCode,
	)
	return i, err
}

const getUserActivities = `-- name: GetUserActivities :many
SELECT id, created_at, updated_at, name, user_id, color_code FROM activities
WHERE user_id = $1
`

func (q *Queries) GetUserActivities(ctx context.Context, userID uuid.UUID) ([]Activity, error) {
	rows, err := q.db.QueryContext(ctx, getUserActivities, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Activity
	for rows.Next() {
		var i Activity
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.UserID,
			&i.ColorCode,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
